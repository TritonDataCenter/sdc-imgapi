#!/bin/bash
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright 2017 Joyent, Inc.
# Copyright 2022 MNX Cloud, Inc.
#

#
# *Re*-provision a standalone IMGAPI instance with a new image.
#
# This is meant to be run from the headnode GZ. See notes in
# "docs/standalone.md".
#

if [[ -n "$TRACE" ]]; then
    export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
    set -o xtrace
fi
set -o errexit
set -o pipefail

PATH=/usr/bin:/usr/sbin:/smartdc/bin:/opt/smartdc/bin:/opt/local/bin:/opt/local/sbin


#---- support stuff

function usage () {
    echo "Usage:"
    echo "    imgapi-standalone-reprovision [OPTIONS] INSTANCE IMAGE"
    echo ""
    echo "Options:"
    echo "    -h          Show this help and exit."
    echo "    -y          Skip the confirmation before reprovisioning."
    echo "    -I          Allow reprovision with the current image."
    echo "    -C CHANNEL  Updates channel in which to look for the given IMAGE."
    echo ""
    echo "Where INSTANCE is an existing standalone IMGAPI instance UUID,"
    echo "and IMAGE is an 'imgapi' image UUID or 'latest' to get the latest"
    echo "from the current (or given) channel of updates.tritondatacenter.com."
    echo ""
    echo "Examples:"
    echo ""
    echo "- Reprovision an images.smartos.org inst with the latest experimental"
    echo "  'imgapi' image:"
    echo "      ./imgapi-standalone-reprovision -C experimental \\"
    echo "          205c49c8-715e-11e6-9134-239a750f414c latest"
}

function fatal {
    echo "$0: fatal error: $*"
    exit 1
}

function errexit {
    [[ $1 -ne 0 ]] || exit 0
    fatal "error exit status $1"
}


#---- mainline

trap 'errexit $?' EXIT

[[ $(zonename) == "global" ]] || fatal "must run this from the global zone"

optAllowSameImage=
optYes=
optChannel=
while getopts "hyIC:" opt
do
    case "$opt" in
        h)
            usage
            exit 0
            ;;
        y)
            optYes=yes
            ;;
        I)
            optAllowSameImage=yes
            ;;
        C)
            optChannel=$OPTARG
            ;;
        *)
            usage
            exit 1
            ;;
    esac
done
shift $((OPTIND - 1))
INSTANCE=$1
[[ -n $INSTANCE ]] || fatal 'no INSTANCE arg given'
IMAGE=$2
[[ -n $IMAGE ]] || fatal 'no IMAGE arg given'

echo "Looking up instance $INSTANCE"
instJson=$(sdc-vmadm get $INSTANCE)
instUuid=$(echo "$instJson" | json uuid)
instImageUuid=$(echo "$instJson" | json image_uuid)
instAlias=$(echo "$instJson" | json alias)
instDelegateDataset=$(echo "$instJson" | json datasets | json -a)
ownerUuid=$(echo "$instJson" | json owner_uuid)

if [[ -z "$instDelegateDataset" ]]; then
    fatal "Instance $INSTANCE ($instAlias) does not have a delegate dataset: reprovisioning could lose IMGAPI data"
fi

echo "Looking up owner $ownerUuid"
ownerJson=$(sdc-useradm get $ownerUuid)
ownerLogin=$(echo "$ownerJson" | json login)
ownerCompany=$(echo "$ownerJson" | json company)

# Guard against a possible accidental reprovisioning of a *core* IMGAPI zone
# for this DC (which will be owned by 'admin').
if [[ $ownerLogin == "admin" ]]; then
    fatal "instance $INSTANCE ($instAlias) is owned by 'admin': are you accidentally trying to reprovision a core DC IMGAPI?"
fi

if [[ -n "$optChannel" ]]; then
    channel=$optChannel
else
    channel=$(sdcadm channel get)
fi
if [[ "$IMAGE" == "latest" ]]; then
    echo "Finding latest imgapi image (in '$channel' channel) on updates.jo"
    imageUuid=$(updates-imgadm -C $channel list name=imgapi --latest -H -o uuid)
    [[ -n "$imageUuid" ]] || fatal "no imgapi image in $channel change"
else
    imageUuid=$IMAGE
fi

if [[ $optAllowSameImage != "yes" ]]; then
if [[ $imageUuid == "$instImageUuid" ]]; then
    echo "Instance $INSTANCE ($instAlias) is already using image $imageUuid: skipping"
    exit 0
fi
fi

imageJson=$(sdc-imgadm get $imageUuid 2>/dev/null || true)
if [[ -z "$imageJson" ]]; then
    echo "Importing image $imageUuid from updates.jo"
    sdc-imgadm import $imageUuid -S https://updates.tritondatacenter.com?channel=$channel
    imageJson=$(sdc-imgadm get $imageUuid)
else
    echo "Already have image $imageUuid in local IMGAPI"
fi
imageName=$(echo "$imageJson" | json name)
[[ "$imageName" == "imgapi" ]] \
    || fatal "image $imageUuid is name=$imageName (expected 'name=imgapi')"
imageVersion=$(echo "$imageJson" | json version)

# Ensure OWNER is on image ACL.
onAcl=$(echo "$imageJson" | json acl | json -a | (grep $ownerUuid || true))
if [[ -z "$onAcl" ]]; then
    echo "Adding owner ($ownerUuid) to image ACL"
    sdc-imgadm add-acl $imageUuid $ownerUuid
else
    echo "Owner ($ownerUuid) is already on the image ACL"
fi

# Current image details.
fromImageJson=$(sdc-imgadm get $instImageUuid 2>/dev/null || true)
if [[ -n "$fromImageJson" ]]; then
    fromImageName=$(echo "$fromImageJson" | json name)
    fromImageVersion=$(echo "$fromImageJson" | json version)
else
    fromImageName="???"
    fromImageVersion="???"
fi

# Confirm data
echo ""
echo "Reprovision standalone IMGAPI instance:"
echo "       uuid: $instUuid"
echo "      alias: $instAlias"
echo "      owner: $ownerUuid ($ownerLogin, company=$ownerCompany)"
echo " from image: $instImageUuid ($fromImageName@$fromImageVersion)"
echo "   to image: $imageUuid ($imageName@$imageVersion)"
echo ""
if [[ $optYes != "yes" ]]; then
    echo "Hit enter to continue / Ctrl+C to abort."
    read
fi

# Reprovision
# Not using 'sdc-vmadm reprovision $instUuid $imageUuid' because it doesn't
# have a way to wait.
startTimeSec=$(date -u +%s)
startTimestamp=$(date -u '+%Y-%m-%dT%H:%M:%S')
sdc-vmapi /vms/$instUuid?action=reprovision -X POST -d@- <<EOP | json -H | sdc-waitforjob
{
    "image_uuid": "$imageUuid"
}
EOP
# TODO: ^^^ does that exit non-zero on job failure? It would be nice.

# Poll until get a 200 status ping (give it up to 2 minutes)
echo ""
echo "Waiting for IMGAPI service ping to respond with a 200"
MAX_TRIES=40
instIp=$(sdc-vmadm get $instUuid | json nics | json -c 'this.primary' 0.ip)
[[ -n $instIp ]] || fatal "could not determine VM $instUuid primary IP"
nTries=0
pingResponse=
pingStatus=
while [[ nTries -lt $MAX_TRIES ]]; do
    sleep 3
    echo -n '.'
    pingResponse=$(curl -ski --connect-timeout 2 --max-time 5 https://$instIp/ping || true)
    pingStatus=$(echo "$pingResponse" | head -1 | awk '{print $2}')
    if [[ $pingStatus == "200" ]]; then
        break
    fi
    nTries=$(( $nTries + 1 ))
done
if [[ $pingStatus != "200" ]]; then
    fatal "timeout waiting for IMGAPI ping to respond with 200:
--
$pingResponse
--"
else
    echo ""
    endTimeSec=$(date -u +%s)
    endTimestamp=$(date -u '+%Y-%m-%dT%H:%M:%S')
    echo "Successfully reprovisioned IMGAPI instance $instUuid ($instAlias)"
    echo "   started: $startTimestamp"
    echo "  finished: $endTimestamp"
    echo "   elapsed: $(( $endTimeSec - $startTimeSec ))s"
fi

exit 0
