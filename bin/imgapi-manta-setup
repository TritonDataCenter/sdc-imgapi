#!/opt/smartdc/imgapi/build/node/bin/node
/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

/*
 * Copyright 2020 Joyent, Inc.
 */

/*
 * Setup this IMGAPI to use a Manta (for storage) that shares the same master
 * UFDS as this IMGAPI. This IMGAPI+Manta setup (provided the Manta is local,
 * i.e. not across the WAN) is the preferred setup. It uses the
 * $ufds_admin_login (typically the "admin" login) account.
 *
 * The *alternative* (e.g. to have IMGAPI use a Manta with a separate UFDS
 * database) is to use the 'imgapi-external-manta-setup' script in this same
 * directory.
 *
 * This script will:
 *
 * - Generate a new passphrase-less ECDSA "imgapi key", if necessary.
 * - Add this key to the admin ($ufds_admin_login) user.
 * - Set the following metadata on the 'imgapi' service in SAPI:
 *
 *      IMGAPI_MANTA_URL
 *      IMGAPI_MANTA_USER=$ufds_admin_login (typically "admin")
 *      IMGAPI_MANTA_INSECURE
 *      IMGAPI_MANTA_REMOTE             # Boolean. Is this manta remote?
 *      IMGAPI_PUBLIC_KEY
 *      IMGAPI_PRIVATE_KEY
 *      IMGAPI_KEY_ID
 *
 * Those updates will trigger regeneration of the appropriate sapi_manifests
 * to enable IMGAPI to use Manta. Note that it will trigger a refresh of
 * the imgapi service in every imgapi zone (which currently is a *restart*).
 */


var p = console.log;
var trace = process.env.TRACE ? p : function () {};

var format = require('util').format;
var exec = require('child_process').exec;
var path = require('path');
var fs = require('fs');
var os = require('os');

var once = require('once');
var assert = require('assert-plus');
var dashdash = require('dashdash');
var async = require('async');
var sdcClients = require('sdc-clients');
var UFDS = require('ufds');
var bunyan = require('bunyan');


//---- globals

var log; // set in `main()`

var USAGE = (
    'Setup IMGAPI in this TritonDC to use a Manta sharing the same\n'
    + 'master UFDS. Preferrably the Manta is local (i.e. not across the WAN).\n'
    + 'This will do the appropriate setup for all instances of IMGAPI in this\n'
    + 'DC. This is also re-runnable if it fails part way.\n'
    + '\n'
    + 'Usage:\n'
    + '    imgapi-manta-setup <manta-url> [<options>] | bunyan\n'
    + '\n'
    + 'where "<manta-url>" can be the special string "FIRST-LB" as a hack for\n'
    + 'development/staging to indicate the first local Manta LB.\n'
    + '\n'
    + 'Options:\n'
    + '%s\n'
);

var OPTIONS = [
    {
        names: ['help', 'h'],
        type: 'bool',
        help: 'Print this help and exit.'
    },
    {
        names: ['force', 'f'],
        type: 'bool',
        default: false,
        help: 'Force re-creation of a new key, even if there is already one '
            + 'setup. This can be useful for key rotation.'
    },
    {
        names: ['remote', 'r'],
        type: 'bool',
        default: false,
        help: 'Indicate that the Manta is remote, i.e. across the WAN. This '
            + 'info is used by IMGAPI to attempt to intelligently cache image '
            + 'files locally.'
    },
    {
        names: ['insecure', 'i'],
        type: 'bool',
        default: false,
        help: 'Whether to ignore SSL certs when accessing Manta. '
            + 'This should only be used in testing/development.'
    }
];


var CONFIG = require('/data/imgapi/etc/imgapi.config.json');



//---- internal support routines

function fatal(msg, exitCode) {
    console.error('imgapi-manta-setup: error: %s', msg);
    if (msg.stack) {
        console.error(msg.stack);
    }
    process.exit(exitCode);
}


function getMantaUrl(mantaUrl, sdcApp, callback) {
    assert.string(mantaUrl, 'mantaUrl');
    assert.object(sdcApp, 'sdcApp');
    assert.func(callback, 'callback');

    if (mantaUrl !== 'FIRST-LB') {
        return callback(null, mantaUrl);
    }

    var sapi = new sdcClients.SAPI({
        url: 'http://' + sdcApp.metadata.SAPI_SERVICE,
        version: '~2',
        log: log,
        agent: false
    });
    var vmapi = new sdcClients.VMAPI({
        url: 'http://' + sdcApp.metadata.VMAPI_SERVICE,
        log: log,
        agent: false
    });

    sapi.listApplications({
        name: 'manta',
        include_master: true
    }, function (aErr, apps) {
        if (aErr)
            return callback(aErr);
        if (apps.length === 0) {
            return callback(new Error('no "manta" application found'));
        }
        var app = apps[0];
        var mantaOwner = app.owner_uuid;  // should be the poseidon UUID

        // Find the first local manta LB.
        var search = {
            owner_uuid: mantaOwner,
            'tag.manta_role': 'loadbalancer',
            state: 'running'
        };
        vmapi.listVms(search, function (vErr, vms) {
            if (vErr)
                return callback(vErr);
            if (vms.length === 0) {
                return callback(new Error(
                    'no manta "loadbalancer" VMs were found'));
            }
            var nics = vms[0].nics;
            var ip;
            for (var i = 0; i < nics.length; i++) {
                if (nics[i].nic_tag === 'external') {
                    ip = nics[i].ip;
                    break;
                }
            }
            if (!ip) {
                return callback(new Error(
                    'no external IP on the first Manta LB'));
            }
            mantaUrl = 'https://' + ip;
            callback(null, mantaUrl);
        });
    });
}


function getUfdsClient(master, sdcApp, callback) {
    assert.bool(master, 'master');
    assert.object(sdcApp, 'sdcApp');
    assert.func(callback, 'callback');
    log.info({master: master, sdcApp: sdcApp}, 'get ufds client');

    var ufdsHost;
    if (master) {
        var ufdsIsMaster = (sdcApp.metadata.ufds_is_master === 'true');
        if (ufdsIsMaster) {
            ufdsHost = sdcApp.metadata.ufds_domain;
        } else {
            ufdsHost = sdcApp.metadata.ufds_remote_ip;
        }
    } else {
        ufdsHost = sdcApp.metadata.ufds_domain;
    }

    var options = {
        url: 'ldaps://' + ufdsHost,
        bindDN: sdcApp.metadata.ufds_ldap_root_dn,
        bindPassword: sdcApp.metadata.ufds_ldap_root_pw,
        log: log
    };
    var ufds = new UFDS(options);

    var callback_ = once(callback);
    ufds.on('connect', function () {
        log.info('ufds client connect');
        callback_(null, ufds);
    });
    ufds.on('timeout', function () {
        log.error('ufds client timeout');
    });
    ufds.on('error', function (connErr) {
        log.error('ufds client connect error');
        callback_(connErr);
    });
}


/**
 * Generate an ssh key pair and return the content.
 *
 * This is adapted from manta-deployment.git/lib/ssh.js
 */
function generateKey(keyName, callback) {
    assert.func(callback, 'callback');

    var privPath = format('/var/tmp/imgapi.%s.key', process.pid);
    var pubPath = privPath + '.pub';
    var key = {
        name: keyName
    };

    async.series([
        function (next) {
            var cmd = format(
                '/usr/bin/ssh-keygen -t ecdsa -b 256 -f %s -N "" -C "%s"',
                privPath, key.name);
            log.info({cmd: cmd}, 'generating SSH key');
            exec(cmd, function (err, stdout, stderr) {
                if (err) {
                    log.error(err, 'failed to generate SSH key');
                    return (next(err));
                }
                next();
            });
        },
        function (next) {
            log.info('reading private key from %s', privPath);
            fs.readFile(privPath, 'ascii', function (err, contents) {
                if (err) {
                    log.error(err, 'failed to read private key %s', privPath);
                    return (next(err));
                }
                key.priv = contents.trim();
                next(null);
            });
        },
        function (next) {
            log.info('reading public key from %s', pubPath);
            fs.readFile(pubPath, 'ascii', function (err, contents) {
                    if (err) {
                        log.error(err, 'failed to read public key %s', pubPath);
                        return (next(err));
                    }
                    key.pub = contents.trim();
                    next(null);
            });
        },
        function (next) {
            var cmd = format('/usr/bin/ssh-keygen -l -f %s | ' +
                'awk \'{print $2}\'', privPath);
            log.info({cmd: cmd}, 'reading key signature');
            exec(cmd, function (err, stdout, stderr) {
                if (err) {
                    log.error(err, 'failed to read key signature');
                    return (next(err));
                }
                key.id = stdout.trim();
                next(null);
            });
        }
    ], function (err) {
        async.forEach(
            [privPath, pubPath],
            fs.unlink,
            function (uErr) {
                if (uErr) {
                    log.warn(uErr, 'could not remove tmp key files: %s, %s',
                        privPath, pubPath);
                }
                callback(err, key);
            }
        );
    });
}


function getSdcApp(config, callback) {
    var sapi = new sdcClients.SAPI({
        url: 'http://' + config.sapi_service,
        version: '~2',
        log: log,
        agent: false
    });
    sapi.listApplications({name: 'sdc'}, function (aErr, apps) {
        if (aErr)
            return callback(aErr);
        callback(null, apps[0]);
    });
}


/**
 * Ensure the 'imgapi' SAPI service is setup for Manta usage.
 * This generates a new key if necessary.
 *
 * ...
 * @param callback {Function} `function (err, key)`
 *      where `key` is an object of the form returned by `generateKey`,
 *      i.e. with "name", "priv", "pub" and "id" fields.
 */
function ensureImgapiSapiServiceSetup(args, callback) {
    assert.object(args, 'args');
    assert.object(args.config, 'args.config');
    assert.object(args.sdcApp, 'args.sdcApp');
    assert.string(args.mantaUrl, 'args.mantaUrl');
    assert.bool(args.mantaInsecure, 'args.mantaInsecure');
    assert.bool(args.mantaRemote, 'args.mantaRemote');
    assert.bool(args.forceUpdate, 'args.forceUpdate');

    var key;
    var keyName = format('%s imgapi key',
        args.sdcApp.metadata.datacenter_name);
    var sapi = new sdcClients.SAPI({
        url: 'http://' + args.config.sapi_service,
        version: '~2',
        log: log,
        agent: false
    });
    var svc;

    async.series([
        function (next) {
            var searchOpts = {
                name: 'imgapi',
                application_uuid: args.sdcApp.uuid
            };
            sapi.listServices(searchOpts, function (sErr, svcs) {
                if (sErr)
                    return next(sErr);
                svc = svcs[0];

                if (args.forceUpdate) {
                    log.info({forceUpdate: args.forceUpdate},
                        'forcing key re-generation');
                    next();
                    return;
                }

                var expectedFields = [
                    'IMGAPI_MANTA_URL',
                    'IMGAPI_MANTA_USER',
                    'IMGAPI_MANTA_INSECURE',
                    'IMGAPI_MANTA_REMOTE',
                    'IMGAPI_PUBLIC_KEY',
                    'IMGAPI_PRIVATE_KEY',
                    'IMGAPI_KEY_ID'
                ];
                var missingFields = [];
                expectedFields.forEach(function (field) {
                    if (!Object.prototype.hasOwnProperty.call(
                        svc.metadata, field))
                    {
                        missingFields.push(field);
                    }
                });
                if (missingFields.length > 0) {
                    log.info({missingFields: missingFields},
                        'SAPI imgapi svc is *not* fully setup for Manta: '
                        + 'missing %d metadata fields', missingFields.length);
                    next();
                } else {
                    log.info(
                        {keyId: svc.metadata.IMGAPI_KEY_ID, keyName: keyName},
                        'SAPI imgapi svc already has a key for use with '
                        + 'Manta: skipping generating a new key');
                    key = {
                        name: keyName,
                        pub: svc.metadata.IMGAPI_PUBLIC_KEY,
                        priv: svc.metadata.IMGAPI_PRIVATE_KEY,
                        id: svc.metadata.IMGAPI_KEY_ID
                    };
                    next(true); // signal to exit early, everything is good
                }
            });
        },
        function (next) {
            log.info({keyName: keyName}, 'generate a new key');
            generateKey(keyName, function (kErr, key_) {
                if (kErr)
                    return next(kErr);
                key = key_;
                log.info({key: key}, 'generated key');
                next();
            });
        },
        function (next) {
            var md = {
                IMGAPI_MANTA_URL: args.mantaUrl,
                IMGAPI_MANTA_USER: args.config.ufds_admin_login,
                IMGAPI_MANTA_INSECURE: args.mantaInsecure,
                IMGAPI_MANTA_REMOTE: args.mantaRemote,
                IMGAPI_PRIVATE_KEY: key.priv,
                IMGAPI_PUBLIC_KEY: key.pub,
                IMGAPI_KEY_ID: key.id
            };
            sapi.updateService(svc.uuid, {metadata: md}, function (uErr) {
                if (uErr)
                    return (next(uErr));
                log.info('metadata added to imgapi service');
                next();
            });
        }
    ], function (err) {
        if (err === true) {
            // This is the signal that we are done processing early, without
            // an error.
            callback(null, key);
        } else if (err) {
            callback(err);
        } else {
            callback(null, key);
        }
    });
}


function ensureKeyOnAdminUser(config, ufdsMasterClient, key, sdcApp, callback) {
    assert.object(config, 'config');
    assert.object(ufdsMasterClient, 'ufdsMasterClient');
    assert.object(key, 'key');
    assert.object(sdcApp, 'sdcApp');
    assert.func(callback, 'callback');
    log.info('ensure admin user has the imgapi key');

    function deleteKeyIfExists(user, name, next) {
        log.info('check for existing key name "%s" to delete', name);
        ufdsMasterClient.getKey(user, name, function (gErr, keyToDel) {
            if (gErr && gErr.statusCode === 404) {
                next();
            } else if (gErr) {
                next(gErr);
            } else {
                log.info({keyToDel: keyToDel},
                    'deleting existing sdckey with same name');
                ufdsMasterClient.deleteKey(user, keyToDel, next);
            }
        });
    }

    var admin = sdcApp.metadata.ufds_admin_uuid;
    var sdcKey = {
        name: key.name,
        openssh: key.pub
    };
    deleteKeyIfExists(admin, sdcKey.name, function (dErr) {
        if (dErr)
            return callback(dErr);
        ufdsMasterClient.addKey(admin, sdcKey, function (aErr, addedKey) {
            if (aErr)
                return callback(aErr);
            log.info({addedKey: addedKey},
                'added sdckey to admin user in UFDS');
            callback();
        });
    });
}



//---- mainline


function main() {
    log = bunyan.createLogger({    // intentionally global
        name: 'imgapi-manta-setup',
        src: true,
        serializers: bunyan.stdSerializers
    });

    var parser = dashdash.createParser({options: OPTIONS});
    try {
        var opts = parser.parse(process.argv);
    } catch (e) {
        fatal(e.message, 1);
    }
    if (opts.help) {
        p(USAGE, parser.help({includeEnv: true}).trimRight());
        process.exit(0);
    }
    trace('opts', opts);
    if (opts._args.length !== 1) {
        fatal('incorrect number of args', 1);
    }

    var mantaUrl = opts._args[0];
    var ufdsMasterClient;
    var key;
    var sdcApp;

    async.series([
        function (next) {
            log.info('get "sdc" SAPI app');
            getSdcApp(CONFIG, function (err, sdcApp_) {
                sdcApp = sdcApp_;
                next(err);
            });
        },

        function (next) {
            log.info('determine manta URL');
            getMantaUrl(mantaUrl, sdcApp, function (mErr, mantaUrl_) {
                mantaUrl = mantaUrl_;
                log.info({mantaUrl: mantaUrl}, 'mantaUrl');
                next(mErr);
            });
        },

        function (next) {
            ensureImgapiSapiServiceSetup({
                config: CONFIG,
                sdcApp: sdcApp,
                mantaUrl: mantaUrl,
                mantaInsecure: opts.insecure,
                mantaRemote: opts.remote,
                forceUpdate: opts.force
            }, function (sErr, key_) {
                    key = key_;
                    next(sErr);
                }
            );
        },

        function (next) {
            getUfdsClient(true, sdcApp, function (err, ufdsClient_) {
                ufdsMasterClient = ufdsClient_;
                next(err);
            });
        },

        function (next) {
            ensureKeyOnAdminUser(CONFIG, ufdsMasterClient, key, sdcApp, next);
        },

        function (next) {
            log.info('closing ufdsMasterClient');
            ufdsMasterClient.close(function (err) {
                log.info({err: err}, 'closed ufdsMasterClient');
                next(err);
            });
        }
    ], function (err) {
        if (err) {
            fatal(err, 1);
        }
        log.info('Done.');
    });
}

main();
