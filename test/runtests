#!/bin/bash
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#

#
# Copyright 2016 Joyent, Inc.
# Copyright 2022 MNX Cloud, Inc.
#

#
# Run the IMGAPI tests. This is expected to be run from an IMGAPI zone
# in a full SDC (and Manta) setup.
#
# Run `./runtests -h` for usage info.
#

if [ "$TRACE" != "" ]; then
    export PS4='${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
    set -o xtrace
fi
set -o errexit
set -o pipefail

if [[ "$(uname -s)" == "SunOS" ]]; then
    PATH=/opt/smartdc/imgapi/build/node/bin:/opt/smartdc/imgapi/node_modules/.bin:/opt/local/bin:/opt/local/sbin:/usr/bin:/usr/sbin:/bin
fi


#---- support functions

function fatal () {
    echo "$(basename $0): fatal error: $*"
    exit 1
}

function cleanup () {
    local status=$?
    if [[ -n "$opt_local" ]]; then
        imgapi_stop $IMGAPI_URL
    fi
    if [[ $status -ne 0 ]]; then
        echo "error $status (run 'TRACE=1 $0' for more info)"
    fi
}

function usage () {
    echo "Usage:"
    echo "  runtests [OPTIONS...]"
    echo ""
    echo "Options:"
    echo "  -c          Just clean up test data, don't run the tests."
    echo "  -q          Quick. Don't reload the test data."
    echo "  -f FILTER   Filter pattern (substring match) for test files to run."
    echo "  -p          Run tests against 'public' mode IMGAPI, as opposed to"
    echo "              a 'dc' mode IMGAPI (the default)."
    echo "  -l          Start a local IMGAPI using './imgapi-config-local-MODE.json'"
    echo "              and test against that."
    echo "  -o          Offline. Skip tests and setup that require the internet."
    echo "  -r          nodeunit reporter. Default is 'verbose'."
}

function imgapi_is_running () {
    local imgapi_url=$1
    local response=$(curl -iSs -H accept:application/json \
        $imgapi_url/ping?caller=runtests)
    if [[ $(echo "$response" | json -qH ping) == "pong" ]]; then
        return 0
    else
        return 1
    fi
}

function imgapi_stop () {
    local imgapi_url=$1
    local pid=$(curl -iSs -H accept:application/json $imgapi_url/ping \
        | json -H pid)
    kill $pid
}



#---- mainline

trap 'cleanup' EXIT

start_time=$(date +%s)

TOP=$(cd $(dirname $0)/../; pwd)
NODE_INSTALL=$TOP/build/node
NODEUNIT=./node_modules/.bin/nodeunit


# Options.
opt_just_clean=
opt_test_pattern=
opt_quick=
opt_reporter=verbose
opt_mode=dc
opt_local=
opt_offline=
while getopts "hcqf:r:lpo" opt
do
    case "$opt" in
        h)
            usage
            exit 0
            ;;
        c)
            opt_just_clean=yes
            ;;
        q)
            opt_quick=yes
            ;;
        f)
            opt_test_pattern=$OPTARG
            ;;
        r)
            opt_reporter=$OPTARG
            ;;
        p)
            opt_mode=public
            ;;
        l)
            opt_local=yes
            ;;
        o)
            opt_offline=yes
            ;;
        *)
            usage
            exit 1
            ;;
    esac
done
script_opts=""
if [[ -n "$opt_local" ]]; then
    script_opts+=" -l"
fi
if [[ "$opt_mode" == "public" ]]; then
    script_opts+=" -p"
fi
if [[ -n "$opt_offline" ]]; then
    export IMGAPI_TEST_OFFLINE=1
fi


# Guard from running 'dc' tests in production.
if [[ -z "$opt_local" && "$opt_mode" == "dc" ]]; then
if [[ ! -f "/lib/sdc/.sdc-test-no-production-data" ]]; then
    cat <<EOF
To run this test you must create the file:

    /lib/sdc/.sdc-test-no-production-data

after ensuring you have no production data on this SDC.
EOF
    exit 2
fi
fi


if [[ $opt_reporter == "tap" ]]; then
    # Setup a clean output dir for TAP output if using that reporter.
    OUTPUT_DIR=/var/tmp/imgapitest
    echo "# Setup a clean output dir ($OUTPUT_DIR)."
    rm -rf $OUTPUT_DIR
    mkdir -p $OUTPUT_DIR
fi


# Gather IMGAPI/datacenter data to be used by the test suite.
if [[ "$opt_mode" == "dc" ]]; then
    if [[ -n "$opt_local" ]]; then
        export IMGAPITEST_LOCAL_BASE_DIR=/var/tmp/imgapitest-local-base-dir
        CFG_FILE=$TOP/test/imgapi-config-local-dc.json
        export IMGAPI_URL=http://localhost:$(json port <$CFG_FILE)
    else
        export PATH=/opt/smartdc/bin:$PATH
        CFG_FILE=/data/imgapi/etc/imgapi.config.json
        [[ ! -f "$CFG_FILE" ]] && fatal "'$CFG_FILE' does not exist"
        export UFDS_URL=$(json ufds.url <$CFG_FILE)
        export UFDS_ROOT_DN=$(json ufds.bindDN <$CFG_FILE)
        export UFDS_PASSWORD=$(json ufds.bindPassword <$CFG_FILE)
        if [[ $(zonename) == "global" ]]; then
            export IMGAPI_URL="http://$(sdc-sapi /applications?name=sdc | json -H 0.metadata.IMGAPI_SERVICE)"
        else
            export IMGAPI_URL=http://localhost
        fi
        export IMGAPI_PORT=$(json port <$CFG_FILE)
        if [[ -n "$IMGAPI_PORT" && "$IMGAPI_PORT" != "80" ]]; then
            export IMGAPI_URL=$IMGAPI_URL:$IMGAPI_PORT
        fi
        export UFDS_ADMIN_UUID="$(json adminUuid <$CFG_FILE)"
        export VMAPI_URL=http://"$(json vmapi_service <$CFG_FILE)"
        export CNAPI_URL=http://"$(json cnapi_service <$CFG_FILE)"
        export NAPI_URL=http://"$(json napi_service <$CFG_FILE)"
        imgapi_has_manta="$(curl $IMGAPI_URL/state \
            | json -H -e 'this.hasManta = ~this.storageTypes.indexOf("manta")' hasManta)"
        imgapi_allow_local_create=$(json allowLocalCreateImageFromVm <$CFG_FILE)
        if [[ "$imgapi_has_manta" == "true" \
            || "$imgapi_allow_local_create" == "true" ]]; then
            export IMGAPI_IMAGE_CREATION_ENABLED=true
        else
            export IMGAPI_IMAGE_CREATION_ENABLED=false
        fi
        # Check if x-DC "TestDc" is configured.
        imgapi_xdc_enabled=$(json imgapiUrlFromDatacenter.TestDc <$CFG_FILE)
        if [[ -n "$imgapi_xdc_enabled" ]]; then
            export IMGAPI_XDC_ENABLED=true
            export IMGAPI_DC_NAME=$(json datacenterName <$CFG_FILE)
        fi
    fi
else
    # "public" mode
    if [[ -n "$opt_local" ]]; then
        export IMGAPITEST_LOCAL_BASE_DIR=/var/tmp/imgapitest-local-base-dir
        CFG_FILE=$TOP/test/imgapi-config-local-public.json
        export IMGAPI_URL=http://localhost:$(json port <$CFG_FILE)
    else
        echo "runtests: error: use '-l' (local imgapi server) if using '-p'"
        exit 1
    fi
fi


echo ""
echo "# Test config:"
if [[ -n "$UFDS_URL" ]]; then
    echo "# UFDS_URL is $UFDS_URL"
    echo "# UFDS_ROOTDN is $UFDS_ROOTDN"
    echo '# UFDS_PASSWORD is ***'
fi
echo "# IMGAPI_URL is $IMGAPI_URL"


# Guard against running 'public' tests against production images.smartos.org.
if [[ "$IMGAPI_URL" == "https://images.smartos.org" ]]; then
    echo "runtests: error: don't run the test suite against images.jo"
    exit 1
fi


# Simplify: just run everything from $TOP.
cd $TOP


# Clean out old test data.
echo ""
if [[ -n "$opt_just_clean" ]]; then
    echo "# Remove test data."
    bash $TOP/test/rm-test-data.sh $script_opts
    exit 0;
fi

# Load test data.
if [[ -z "$opt_quick" ]]; then
    echo "# Reload test data."
    bash $TOP/test/reload-test-data.sh $script_opts
fi

# Start the two imgapi services, if necessary (only for local testing).
if [[ -n "$opt_local" ]]; then
    echo '# Start local imgapi (`tail -f tmp/local.log | bunyan`).'
    mkdir -p tmp
    node main.js -ddd -f $CFG_FILE >tmp/local.log 2>&1 &
    for i in 1 2 3 4 5 6 7 8 9; do
        sleep 0.5
        echo "# Check if local imgapi is up yet ($IMGAPI_URL)."
        if imgapi_is_running $IMGAPI_URL; then
            break
        fi
    done
    imgapi_is_running $IMGAPI_URL || fatal 'Local imgapi did not start.'
    echo "# Local imgapi is up."
fi


# Clear caches.
if [[ -n $opt_local || "$opt_mode" != "public" ]]; then
    echo "# Drop IMGAPI caches."
    curl -isS $IMGAPI_URL/state?action=dropcaches -X POST >/dev/null
fi


# Gather tests to run.
echo ""
if [[ "$opt_mode" == "dc" ]]; then
    test_files=$(ls -1 test/*.test.js test/*.dc-test.js)
else
    # Public mode tests are a separate set because:
    # - we aren't currently loading test data
    # - we must be non-destructive for images.smartos.org tests
    test_files=$(ls -1 test/*.test.js test/*.public-test.js || true)
fi
if [[ -n "$opt_test_pattern" ]]; then
    test_files=$(echo "$test_files" | grep "$opt_test_pattern" || true)
    echo "# Running filtered set of test files: $test_files"
fi

# Run the tests.
retval=0
if [[ -n "$test_files" ]]; then
    if [[ $opt_reporter == "tap" ]]; then
        PATH=$NODE_INSTALL/bin:$PATH $NODEUNIT --reporter $opt_reporter $test_files \
            | tee $OUTPUT_DIR/imgapi.tap
        retval=$?
    else
        PATH=$NODE_INSTALL/bin:$PATH $NODEUNIT --reporter $opt_reporter $test_files
        retval=$?
    fi
fi

exit ${retval}
